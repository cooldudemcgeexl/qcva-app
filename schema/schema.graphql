# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateCustomer {
  _count: CustomerCountAggregate
  _max: CustomerMaxAggregate
  _min: CustomerMinAggregate
}

type AggregateOrder {
  _avg: OrderAvgAggregate
  _count: OrderCountAggregate
  _max: OrderMaxAggregate
  _min: OrderMinAggregate
  _sum: OrderSumAggregate
}

type AggregateOrderItem {
  _avg: OrderItemAvgAggregate
  _count: OrderItemCountAggregate
  _max: OrderItemMaxAggregate
  _min: OrderItemMinAggregate
  _sum: OrderItemSumAggregate
}

type AggregatePole {
  _avg: PoleAvgAggregate
  _count: PoleCountAggregate
  _max: PoleMaxAggregate
  _min: PoleMinAggregate
  _sum: PoleSumAggregate
}

type AggregatePoleHistory {
  _avg: PoleHistoryAvgAggregate
  _count: PoleHistoryCountAggregate
  _max: PoleHistoryMaxAggregate
  _min: PoleHistoryMinAggregate
  _sum: PoleHistorySumAggregate
}

type AggregatePoleRate {
  _avg: PoleRateAvgAggregate
  _count: PoleRateCountAggregate
  _max: PoleRateMaxAggregate
  _min: PoleRateMinAggregate
  _sum: PoleRateSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Customer {
  _count: CustomerCount
  address: String
  city: String
  email: String
  firstName: String!
  id: String!
  lastName: String!
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  phone: String
  state: String
  zip: String
}

type CustomerCount {
  orders(where: OrderWhereInput): Int!
}

type CustomerCountAggregate {
  _all: Int!
  address: Int!
  city: Int!
  email: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  phone: Int!
  state: Int!
  zip: Int!
}

input CustomerCountOrderByAggregateInput {
  address: SortOrder
  city: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrder
  state: SortOrder
  zip: SortOrder
}

input CustomerCreateInput {
  address: String
  city: String
  email: String
  firstName: String!
  id: String
  lastName: String!
  orders: OrderCreateNestedManyWithoutCustomerInput
  phone: String
  state: String
  zip: String
}

input CustomerCreateNestedOneWithoutOrdersInput {
  connect: CustomerWhereUniqueInput
  connectOrCreate: CustomerCreateOrConnectWithoutOrdersInput
  create: CustomerCreateWithoutOrdersInput
}

input CustomerCreateOrConnectWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput!
  where: CustomerWhereUniqueInput!
}

input CustomerCreateWithoutOrdersInput {
  address: String
  city: String
  email: String
  firstName: String!
  id: String
  lastName: String!
  phone: String
  state: String
  zip: String
}

type CustomerGroupBy {
  _count: CustomerCountAggregate
  _max: CustomerMaxAggregate
  _min: CustomerMinAggregate
  address: String
  city: String
  email: String
  firstName: String!
  id: String!
  lastName: String!
  phone: String
  state: String
  zip: String
}

type CustomerMaxAggregate {
  address: String
  city: String
  email: String
  firstName: String
  id: String
  lastName: String
  phone: String
  state: String
  zip: String
}

input CustomerMaxOrderByAggregateInput {
  address: SortOrder
  city: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrder
  state: SortOrder
  zip: SortOrder
}

type CustomerMinAggregate {
  address: String
  city: String
  email: String
  firstName: String
  id: String
  lastName: String
  phone: String
  state: String
  zip: String
}

input CustomerMinOrderByAggregateInput {
  address: SortOrder
  city: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrder
  state: SortOrder
  zip: SortOrder
}

input CustomerOrderByWithAggregationInput {
  _count: CustomerCountOrderByAggregateInput
  _max: CustomerMaxOrderByAggregateInput
  _min: CustomerMinOrderByAggregateInput
  address: SortOrderInput
  city: SortOrderInput
  email: SortOrderInput
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phone: SortOrderInput
  state: SortOrderInput
  zip: SortOrderInput
}

input CustomerOrderByWithRelationInput {
  address: SortOrderInput
  city: SortOrderInput
  email: SortOrderInput
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  orders: OrderOrderByRelationAggregateInput
  phone: SortOrderInput
  state: SortOrderInput
  zip: SortOrderInput
}

input CustomerRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

enum CustomerScalarFieldEnum {
  address
  city
  email
  firstName
  id
  lastName
  phone
  state
  zip
}

input CustomerScalarWhereWithAggregatesInput {
  AND: [CustomerScalarWhereWithAggregatesInput!]
  NOT: [CustomerScalarWhereWithAggregatesInput!]
  OR: [CustomerScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  city: StringNullableWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  state: StringNullableWithAggregatesFilter
  zip: StringNullableWithAggregatesFilter
}

input CustomerUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutCustomerNestedInput
  phone: NullableStringFieldUpdateOperationsInput
  state: NullableStringFieldUpdateOperationsInput
  zip: NullableStringFieldUpdateOperationsInput
}

input CustomerUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  state: NullableStringFieldUpdateOperationsInput
  zip: NullableStringFieldUpdateOperationsInput
}

input CustomerUpdateOneRequiredWithoutOrdersNestedInput {
  connect: CustomerWhereUniqueInput
  connectOrCreate: CustomerCreateOrConnectWithoutOrdersInput
  create: CustomerCreateWithoutOrdersInput
  update: CustomerUpdateToOneWithWhereWithoutOrdersInput
  upsert: CustomerUpsertWithoutOrdersInput
}

input CustomerUpdateToOneWithWhereWithoutOrdersInput {
  data: CustomerUpdateWithoutOrdersInput!
  where: CustomerWhereInput
}

input CustomerUpdateWithoutOrdersInput {
  address: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  state: NullableStringFieldUpdateOperationsInput
  zip: NullableStringFieldUpdateOperationsInput
}

input CustomerUpsertWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput!
  update: CustomerUpdateWithoutOrdersInput!
  where: CustomerWhereInput
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  address: StringNullableFilter
  city: StringNullableFilter
  email: StringNullableFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  orders: OrderListRelationFilter
  phone: StringNullableFilter
  state: StringNullableFilter
  zip: StringNullableFilter
}

input CustomerWhereUniqueInput {
  AND: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  address: StringNullableFilter
  city: StringNullableFilter
  email: StringNullableFilter
  firstName: StringFilter
  id: String
  lastName: StringFilter
  orders: OrderListRelationFilter
  phone: StringNullableFilter
  state: StringNullableFilter
  zip: StringNullableFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input DecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal!]
}

input DecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createOneCustomer(data: CustomerCreateInput!): Customer!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneOrderItem(data: OrderItemCreateInput!): OrderItem!
  createOnePole(data: PoleCreateInput!): Pole!
  createOnePoleHistory(data: PoleHistoryCreateInput!): PoleHistory!
  createOnePoleRate(data: PoleRateCreateInput!): PoleRate!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCustomer(where: CustomerWhereInput): AffectedRowsOutput!
  deleteManyOrder(where: OrderWhereInput): AffectedRowsOutput!
  deleteManyOrderItem(where: OrderItemWhereInput): AffectedRowsOutput!
  deleteManyPole(where: PoleWhereInput): AffectedRowsOutput!
  deleteManyPoleHistory(where: PoleHistoryWhereInput): AffectedRowsOutput!
  deleteManyPoleRate(where: PoleRateWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOnePole(where: PoleWhereUniqueInput!): Pole
  deleteOnePoleHistory(where: PoleHistoryWhereUniqueInput!): PoleHistory
  deleteOnePoleRate(where: PoleRateWhereUniqueInput!): PoleRate
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyCustomer(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): AffectedRowsOutput!
  updateManyOrder(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): AffectedRowsOutput!
  updateManyOrderItem(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): AffectedRowsOutput!
  updateManyPole(data: PoleUpdateManyMutationInput!, where: PoleWhereInput): AffectedRowsOutput!
  updateManyPoleHistory(data: PoleHistoryUpdateManyMutationInput!, where: PoleHistoryWhereInput): AffectedRowsOutput!
  updateManyPoleRate(data: PoleRateUpdateManyMutationInput!, where: PoleRateWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateOnePole(data: PoleUpdateInput!, where: PoleWhereUniqueInput!): Pole
  updateOnePoleHistory(data: PoleHistoryUpdateInput!, where: PoleHistoryWhereUniqueInput!): PoleHistory
  updateOnePoleRate(data: PoleRateUpdateInput!, where: PoleRateWhereUniqueInput!): PoleRate
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneCustomer(create: CustomerCreateInput!, update: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  upsertOneOrder(create: OrderCreateInput!, update: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  upsertOneOrderItem(create: OrderItemCreateInput!, update: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem!
  upsertOnePole(create: PoleCreateInput!, update: PoleUpdateInput!, where: PoleWhereUniqueInput!): Pole!
  upsertOnePoleHistory(create: PoleHistoryCreateInput!, update: PoleHistoryUpdateInput!, where: PoleHistoryWhereUniqueInput!): PoleHistory!
  upsertOnePoleRate(create: PoleRateCreateInput!, update: PoleRateUpdateInput!, where: PoleRateWhereUniqueInput!): PoleRate!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal!]
}

input NestedDecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Order {
  _count: OrderCount
  closed: Boolean!
  customer: Customer!
  customerId: String!
  id: String!
  orderDate: DateTime!
  orderItems(cursor: OrderItemWhereUniqueInput, distinct: [OrderItemScalarFieldEnum!], orderBy: [OrderItemOrderByWithRelationInput!], skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]!
  orderTotal: Decimal!
}

type OrderAvgAggregate {
  orderTotal: Decimal
}

input OrderAvgOrderByAggregateInput {
  orderTotal: SortOrder
}

type OrderCount {
  orderItems(where: OrderItemWhereInput): Int!
}

type OrderCountAggregate {
  _all: Int!
  closed: Int!
  customerId: Int!
  id: Int!
  orderDate: Int!
  orderTotal: Int!
}

input OrderCountOrderByAggregateInput {
  closed: SortOrder
  customerId: SortOrder
  id: SortOrder
  orderDate: SortOrder
  orderTotal: SortOrder
}

input OrderCreateInput {
  closed: Boolean!
  customer: CustomerCreateNestedOneWithoutOrdersInput!
  id: String
  orderDate: DateTime!
  orderItems: OrderItemCreateNestedManyWithoutOrderInput
  orderTotal: Decimal!
}

input OrderCreateNestedManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutCustomerInput!]
  create: [OrderCreateWithoutCustomerInput!]
}

input OrderCreateNestedOneWithoutOrderItemsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutOrderItemsInput
  create: OrderCreateWithoutOrderItemsInput
}

input OrderCreateOrConnectWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutOrderItemsInput {
  create: OrderCreateWithoutOrderItemsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutCustomerInput {
  closed: Boolean!
  id: String
  orderDate: DateTime!
  orderItems: OrderItemCreateNestedManyWithoutOrderInput
  orderTotal: Decimal!
}

input OrderCreateWithoutOrderItemsInput {
  closed: Boolean!
  customer: CustomerCreateNestedOneWithoutOrdersInput!
  id: String
  orderDate: DateTime!
  orderTotal: Decimal!
}

type OrderGroupBy {
  _avg: OrderAvgAggregate
  _count: OrderCountAggregate
  _max: OrderMaxAggregate
  _min: OrderMinAggregate
  _sum: OrderSumAggregate
  closed: Boolean!
  customerId: String!
  id: String!
  orderDate: DateTime!
  orderTotal: Decimal!
}

type OrderItem {
  id: String!
  order: Order!
  orderId: String!
  orderType: String!
  pole: Pole!
  poleId: Int!
  price: Decimal!
}

type OrderItemAvgAggregate {
  poleId: Float
  price: Decimal
}

input OrderItemAvgOrderByAggregateInput {
  poleId: SortOrder
  price: SortOrder
}

type OrderItemCountAggregate {
  _all: Int!
  id: Int!
  orderId: Int!
  orderType: Int!
  poleId: Int!
  price: Int!
}

input OrderItemCountOrderByAggregateInput {
  id: SortOrder
  orderId: SortOrder
  orderType: SortOrder
  poleId: SortOrder
  price: SortOrder
}

input OrderItemCreateInput {
  id: String
  order: OrderCreateNestedOneWithoutOrderItemsInput!
  orderType: String!
  pole: PoleCreateNestedOneWithoutOrderItemInput!
  price: Decimal!
}

input OrderItemCreateNestedManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  connectOrCreate: [OrderItemCreateOrConnectWithoutOrderInput!]
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateNestedManyWithoutPoleInput {
  connect: [OrderItemWhereUniqueInput!]
  connectOrCreate: [OrderItemCreateOrConnectWithoutPoleInput!]
  create: [OrderItemCreateWithoutPoleInput!]
}

input OrderItemCreateOrConnectWithoutOrderInput {
  create: OrderItemCreateWithoutOrderInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemCreateOrConnectWithoutPoleInput {
  create: OrderItemCreateWithoutPoleInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemCreateWithoutOrderInput {
  id: String
  orderType: String!
  pole: PoleCreateNestedOneWithoutOrderItemInput!
  price: Decimal!
}

input OrderItemCreateWithoutPoleInput {
  id: String
  order: OrderCreateNestedOneWithoutOrderItemsInput!
  orderType: String!
  price: Decimal!
}

type OrderItemGroupBy {
  _avg: OrderItemAvgAggregate
  _count: OrderItemCountAggregate
  _max: OrderItemMaxAggregate
  _min: OrderItemMinAggregate
  _sum: OrderItemSumAggregate
  id: String!
  orderId: String!
  orderType: String!
  poleId: Int!
  price: Decimal!
}

input OrderItemListRelationFilter {
  every: OrderItemWhereInput
  none: OrderItemWhereInput
  some: OrderItemWhereInput
}

type OrderItemMaxAggregate {
  id: String
  orderId: String
  orderType: String
  poleId: Int
  price: Decimal
}

input OrderItemMaxOrderByAggregateInput {
  id: SortOrder
  orderId: SortOrder
  orderType: SortOrder
  poleId: SortOrder
  price: SortOrder
}

type OrderItemMinAggregate {
  id: String
  orderId: String
  orderType: String
  poleId: Int
  price: Decimal
}

input OrderItemMinOrderByAggregateInput {
  id: SortOrder
  orderId: SortOrder
  orderType: SortOrder
  poleId: SortOrder
  price: SortOrder
}

input OrderItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderItemOrderByWithAggregationInput {
  _avg: OrderItemAvgOrderByAggregateInput
  _count: OrderItemCountOrderByAggregateInput
  _max: OrderItemMaxOrderByAggregateInput
  _min: OrderItemMinOrderByAggregateInput
  _sum: OrderItemSumOrderByAggregateInput
  id: SortOrder
  orderId: SortOrder
  orderType: SortOrder
  poleId: SortOrder
  price: SortOrder
}

input OrderItemOrderByWithRelationInput {
  id: SortOrder
  order: OrderOrderByWithRelationInput
  orderId: SortOrder
  orderType: SortOrder
  pole: PoleOrderByWithRelationInput
  poleId: SortOrder
  price: SortOrder
}

enum OrderItemScalarFieldEnum {
  id
  orderId
  orderType
  poleId
  price
}

input OrderItemScalarWhereInput {
  AND: [OrderItemScalarWhereInput!]
  NOT: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  id: StringFilter
  orderId: StringFilter
  orderType: StringFilter
  poleId: IntFilter
  price: DecimalFilter
}

input OrderItemScalarWhereWithAggregatesInput {
  AND: [OrderItemScalarWhereWithAggregatesInput!]
  NOT: [OrderItemScalarWhereWithAggregatesInput!]
  OR: [OrderItemScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  orderId: StringWithAggregatesFilter
  orderType: StringWithAggregatesFilter
  poleId: IntWithAggregatesFilter
  price: DecimalWithAggregatesFilter
}

type OrderItemSumAggregate {
  poleId: Int
  price: Decimal
}

input OrderItemSumOrderByAggregateInput {
  poleId: SortOrder
  price: SortOrder
}

input OrderItemUpdateInput {
  id: StringFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
  orderType: StringFieldUpdateOperationsInput
  pole: PoleUpdateOneRequiredWithoutOrderItemNestedInput
  price: DecimalFieldUpdateOperationsInput
}

input OrderItemUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  orderType: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
}

input OrderItemUpdateManyWithWhereWithoutOrderInput {
  data: OrderItemUpdateManyMutationInput!
  where: OrderItemScalarWhereInput!
}

input OrderItemUpdateManyWithWhereWithoutPoleInput {
  data: OrderItemUpdateManyMutationInput!
  where: OrderItemScalarWhereInput!
}

input OrderItemUpdateManyWithoutOrderNestedInput {
  connect: [OrderItemWhereUniqueInput!]
  connectOrCreate: [OrderItemCreateOrConnectWithoutOrderInput!]
  create: [OrderItemCreateWithoutOrderInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderItemUpdateManyWithWhereWithoutOrderInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderItemUpdateManyWithoutPoleNestedInput {
  connect: [OrderItemWhereUniqueInput!]
  connectOrCreate: [OrderItemCreateOrConnectWithoutPoleInput!]
  create: [OrderItemCreateWithoutPoleInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutPoleInput!]
  updateMany: [OrderItemUpdateManyWithWhereWithoutPoleInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutPoleInput!]
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderItemUpdateWithoutOrderInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpdateWithWhereUniqueWithoutPoleInput {
  data: OrderItemUpdateWithoutPoleInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpdateWithoutOrderInput {
  id: StringFieldUpdateOperationsInput
  orderType: StringFieldUpdateOperationsInput
  pole: PoleUpdateOneRequiredWithoutOrderItemNestedInput
  price: DecimalFieldUpdateOperationsInput
}

input OrderItemUpdateWithoutPoleInput {
  id: StringFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
  orderType: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderItemCreateWithoutOrderInput!
  update: OrderItemUpdateWithoutOrderInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutPoleInput {
  create: OrderItemCreateWithoutPoleInput!
  update: OrderItemUpdateWithoutPoleInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  id: StringFilter
  order: OrderRelationFilter
  orderId: StringFilter
  orderType: StringFilter
  pole: PoleRelationFilter
  poleId: IntFilter
  price: DecimalFilter
}

input OrderItemWhereUniqueInput {
  AND: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  id: String
  order: OrderRelationFilter
  orderId: StringFilter
  orderType: StringFilter
  pole: PoleRelationFilter
  poleId: IntFilter
  price: DecimalFilter
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

type OrderMaxAggregate {
  closed: Boolean
  customerId: String
  id: String
  orderDate: DateTime
  orderTotal: Decimal
}

input OrderMaxOrderByAggregateInput {
  closed: SortOrder
  customerId: SortOrder
  id: SortOrder
  orderDate: SortOrder
  orderTotal: SortOrder
}

type OrderMinAggregate {
  closed: Boolean
  customerId: String
  id: String
  orderDate: DateTime
  orderTotal: Decimal
}

input OrderMinOrderByAggregateInput {
  closed: SortOrder
  customerId: SortOrder
  id: SortOrder
  orderDate: SortOrder
  orderTotal: SortOrder
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByWithAggregationInput {
  _avg: OrderAvgOrderByAggregateInput
  _count: OrderCountOrderByAggregateInput
  _max: OrderMaxOrderByAggregateInput
  _min: OrderMinOrderByAggregateInput
  _sum: OrderSumOrderByAggregateInput
  closed: SortOrder
  customerId: SortOrder
  id: SortOrder
  orderDate: SortOrder
  orderTotal: SortOrder
}

input OrderOrderByWithRelationInput {
  closed: SortOrder
  customer: CustomerOrderByWithRelationInput
  customerId: SortOrder
  id: SortOrder
  orderDate: SortOrder
  orderItems: OrderItemOrderByRelationAggregateInput
  orderTotal: SortOrder
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

enum OrderScalarFieldEnum {
  closed
  customerId
  id
  orderDate
  orderTotal
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  closed: BoolFilter
  customerId: StringFilter
  id: StringFilter
  orderDate: DateTimeFilter
  orderTotal: DecimalFilter
}

input OrderScalarWhereWithAggregatesInput {
  AND: [OrderScalarWhereWithAggregatesInput!]
  NOT: [OrderScalarWhereWithAggregatesInput!]
  OR: [OrderScalarWhereWithAggregatesInput!]
  closed: BoolWithAggregatesFilter
  customerId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  orderDate: DateTimeWithAggregatesFilter
  orderTotal: DecimalWithAggregatesFilter
}

type OrderSumAggregate {
  orderTotal: Decimal
}

input OrderSumOrderByAggregateInput {
  orderTotal: SortOrder
}

input OrderUpdateInput {
  closed: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutOrdersNestedInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderItems: OrderItemUpdateManyWithoutOrderNestedInput
  orderTotal: DecimalFieldUpdateOperationsInput
}

input OrderUpdateManyMutationInput {
  closed: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderTotal: DecimalFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutCustomerInput {
  data: OrderUpdateManyMutationInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutCustomerNestedInput {
  connect: [OrderWhereUniqueInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutCustomerInput!]
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutCustomerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateOneRequiredWithoutOrderItemsNestedInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutOrderItemsInput
  create: OrderCreateWithoutOrderItemsInput
  update: OrderUpdateToOneWithWhereWithoutOrderItemsInput
  upsert: OrderUpsertWithoutOrderItemsInput
}

input OrderUpdateToOneWithWhereWithoutOrderItemsInput {
  data: OrderUpdateWithoutOrderItemsInput!
  where: OrderWhereInput
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  data: OrderUpdateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutCustomerInput {
  closed: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderItems: OrderItemUpdateManyWithoutOrderNestedInput
  orderTotal: DecimalFieldUpdateOperationsInput
}

input OrderUpdateWithoutOrderItemsInput {
  closed: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutOrdersNestedInput
  id: StringFieldUpdateOperationsInput
  orderDate: DateTimeFieldUpdateOperationsInput
  orderTotal: DecimalFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  update: OrderUpdateWithoutCustomerInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutOrderItemsInput {
  create: OrderCreateWithoutOrderItemsInput!
  update: OrderUpdateWithoutOrderItemsInput!
  where: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  closed: BoolFilter
  customer: CustomerRelationFilter
  customerId: StringFilter
  id: StringFilter
  orderDate: DateTimeFilter
  orderItems: OrderItemListRelationFilter
  orderTotal: DecimalFilter
}

input OrderWhereUniqueInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  closed: BoolFilter
  customer: CustomerRelationFilter
  customerId: StringFilter
  id: String
  orderDate: DateTimeFilter
  orderItems: OrderItemListRelationFilter
  orderTotal: DecimalFilter
}

type Pole {
  _count: PoleCount
  cm: Int!
  cost: Decimal!
  dop: DateTime!
  flex: Decimal!
  history(cursor: PoleHistoryWhereUniqueInput, distinct: [PoleHistoryScalarFieldEnum!], orderBy: [PoleHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: PoleHistoryWhereInput): [PoleHistory!]!
  id: Int!
  length: String!
  nfc: String
  note: String
  orderItem(cursor: OrderItemWhereUniqueInput, distinct: [OrderItemScalarFieldEnum!], orderBy: [OrderItemOrderByWithRelationInput!], skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]!
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String!
  weight: Int!
}

type PoleAvgAggregate {
  cm: Float
  cost: Decimal
  flex: Decimal
  id: Float
  revenue: Decimal
  soldAt: Decimal
  weight: Float
}

input PoleAvgOrderByAggregateInput {
  cm: SortOrder
  cost: SortOrder
  flex: SortOrder
  id: SortOrder
  revenue: SortOrder
  soldAt: SortOrder
  weight: SortOrder
}

type PoleCount {
  history(where: PoleHistoryWhereInput): Int!
  orderItem(where: OrderItemWhereInput): Int!
}

type PoleCountAggregate {
  _all: Int!
  cm: Int!
  cost: Int!
  dop: Int!
  flex: Int!
  id: Int!
  length: Int!
  nfc: Int!
  note: Int!
  revenue: Int!
  serialNumber: Int!
  soldAt: Int!
  status: Int!
  weight: Int!
}

input PoleCountOrderByAggregateInput {
  cm: SortOrder
  cost: SortOrder
  dop: SortOrder
  flex: SortOrder
  id: SortOrder
  length: SortOrder
  nfc: SortOrder
  note: SortOrder
  revenue: SortOrder
  serialNumber: SortOrder
  soldAt: SortOrder
  status: SortOrder
  weight: SortOrder
}

input PoleCreateInput {
  cm: Int!
  cost: Decimal!
  dop: DateTime!
  flex: Decimal!
  history: PoleHistoryCreateNestedManyWithoutPoleInput
  length: String!
  nfc: String
  note: String
  orderItem: OrderItemCreateNestedManyWithoutPoleInput
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String!
  weight: Int!
}

input PoleCreateNestedOneWithoutHistoryInput {
  connect: PoleWhereUniqueInput
  connectOrCreate: PoleCreateOrConnectWithoutHistoryInput
  create: PoleCreateWithoutHistoryInput
}

input PoleCreateNestedOneWithoutOrderItemInput {
  connect: PoleWhereUniqueInput
  connectOrCreate: PoleCreateOrConnectWithoutOrderItemInput
  create: PoleCreateWithoutOrderItemInput
}

input PoleCreateOrConnectWithoutHistoryInput {
  create: PoleCreateWithoutHistoryInput!
  where: PoleWhereUniqueInput!
}

input PoleCreateOrConnectWithoutOrderItemInput {
  create: PoleCreateWithoutOrderItemInput!
  where: PoleWhereUniqueInput!
}

input PoleCreateWithoutHistoryInput {
  cm: Int!
  cost: Decimal!
  dop: DateTime!
  flex: Decimal!
  length: String!
  nfc: String
  note: String
  orderItem: OrderItemCreateNestedManyWithoutPoleInput
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String!
  weight: Int!
}

input PoleCreateWithoutOrderItemInput {
  cm: Int!
  cost: Decimal!
  dop: DateTime!
  flex: Decimal!
  history: PoleHistoryCreateNestedManyWithoutPoleInput
  length: String!
  nfc: String
  note: String
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String!
  weight: Int!
}

type PoleGroupBy {
  _avg: PoleAvgAggregate
  _count: PoleCountAggregate
  _max: PoleMaxAggregate
  _min: PoleMinAggregate
  _sum: PoleSumAggregate
  cm: Int!
  cost: Decimal!
  dop: DateTime!
  flex: Decimal!
  id: Int!
  length: String!
  nfc: String
  note: String
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String!
  weight: Int!
}

type PoleHistory {
  comment: String!
  date: DateTime!
  id: String!
  pole: Pole!
  poleId: Int!
}

type PoleHistoryAvgAggregate {
  poleId: Float
}

input PoleHistoryAvgOrderByAggregateInput {
  poleId: SortOrder
}

type PoleHistoryCountAggregate {
  _all: Int!
  comment: Int!
  date: Int!
  id: Int!
  poleId: Int!
}

input PoleHistoryCountOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  poleId: SortOrder
}

input PoleHistoryCreateInput {
  comment: String!
  date: DateTime!
  id: String
  pole: PoleCreateNestedOneWithoutHistoryInput!
}

input PoleHistoryCreateNestedManyWithoutPoleInput {
  connect: [PoleHistoryWhereUniqueInput!]
  connectOrCreate: [PoleHistoryCreateOrConnectWithoutPoleInput!]
  create: [PoleHistoryCreateWithoutPoleInput!]
}

input PoleHistoryCreateOrConnectWithoutPoleInput {
  create: PoleHistoryCreateWithoutPoleInput!
  where: PoleHistoryWhereUniqueInput!
}

input PoleHistoryCreateWithoutPoleInput {
  comment: String!
  date: DateTime!
  id: String
}

type PoleHistoryGroupBy {
  _avg: PoleHistoryAvgAggregate
  _count: PoleHistoryCountAggregate
  _max: PoleHistoryMaxAggregate
  _min: PoleHistoryMinAggregate
  _sum: PoleHistorySumAggregate
  comment: String!
  date: DateTime!
  id: String!
  poleId: Int!
}

input PoleHistoryListRelationFilter {
  every: PoleHistoryWhereInput
  none: PoleHistoryWhereInput
  some: PoleHistoryWhereInput
}

type PoleHistoryMaxAggregate {
  comment: String
  date: DateTime
  id: String
  poleId: Int
}

input PoleHistoryMaxOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  poleId: SortOrder
}

type PoleHistoryMinAggregate {
  comment: String
  date: DateTime
  id: String
  poleId: Int
}

input PoleHistoryMinOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  poleId: SortOrder
}

input PoleHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input PoleHistoryOrderByWithAggregationInput {
  _avg: PoleHistoryAvgOrderByAggregateInput
  _count: PoleHistoryCountOrderByAggregateInput
  _max: PoleHistoryMaxOrderByAggregateInput
  _min: PoleHistoryMinOrderByAggregateInput
  _sum: PoleHistorySumOrderByAggregateInput
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  poleId: SortOrder
}

input PoleHistoryOrderByWithRelationInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  pole: PoleOrderByWithRelationInput
  poleId: SortOrder
}

enum PoleHistoryScalarFieldEnum {
  comment
  date
  id
  poleId
}

input PoleHistoryScalarWhereInput {
  AND: [PoleHistoryScalarWhereInput!]
  NOT: [PoleHistoryScalarWhereInput!]
  OR: [PoleHistoryScalarWhereInput!]
  comment: StringFilter
  date: DateTimeFilter
  id: StringFilter
  poleId: IntFilter
}

input PoleHistoryScalarWhereWithAggregatesInput {
  AND: [PoleHistoryScalarWhereWithAggregatesInput!]
  NOT: [PoleHistoryScalarWhereWithAggregatesInput!]
  OR: [PoleHistoryScalarWhereWithAggregatesInput!]
  comment: StringWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  poleId: IntWithAggregatesFilter
}

type PoleHistorySumAggregate {
  poleId: Int
}

input PoleHistorySumOrderByAggregateInput {
  poleId: SortOrder
}

input PoleHistoryUpdateInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  pole: PoleUpdateOneRequiredWithoutHistoryNestedInput
}

input PoleHistoryUpdateManyMutationInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input PoleHistoryUpdateManyWithWhereWithoutPoleInput {
  data: PoleHistoryUpdateManyMutationInput!
  where: PoleHistoryScalarWhereInput!
}

input PoleHistoryUpdateManyWithoutPoleNestedInput {
  connect: [PoleHistoryWhereUniqueInput!]
  connectOrCreate: [PoleHistoryCreateOrConnectWithoutPoleInput!]
  create: [PoleHistoryCreateWithoutPoleInput!]
  delete: [PoleHistoryWhereUniqueInput!]
  deleteMany: [PoleHistoryScalarWhereInput!]
  disconnect: [PoleHistoryWhereUniqueInput!]
  set: [PoleHistoryWhereUniqueInput!]
  update: [PoleHistoryUpdateWithWhereUniqueWithoutPoleInput!]
  updateMany: [PoleHistoryUpdateManyWithWhereWithoutPoleInput!]
  upsert: [PoleHistoryUpsertWithWhereUniqueWithoutPoleInput!]
}

input PoleHistoryUpdateWithWhereUniqueWithoutPoleInput {
  data: PoleHistoryUpdateWithoutPoleInput!
  where: PoleHistoryWhereUniqueInput!
}

input PoleHistoryUpdateWithoutPoleInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input PoleHistoryUpsertWithWhereUniqueWithoutPoleInput {
  create: PoleHistoryCreateWithoutPoleInput!
  update: PoleHistoryUpdateWithoutPoleInput!
  where: PoleHistoryWhereUniqueInput!
}

input PoleHistoryWhereInput {
  AND: [PoleHistoryWhereInput!]
  NOT: [PoleHistoryWhereInput!]
  OR: [PoleHistoryWhereInput!]
  comment: StringFilter
  date: DateTimeFilter
  id: StringFilter
  pole: PoleRelationFilter
  poleId: IntFilter
}

input PoleHistoryWhereUniqueInput {
  AND: [PoleHistoryWhereInput!]
  NOT: [PoleHistoryWhereInput!]
  OR: [PoleHistoryWhereInput!]
  comment: StringFilter
  date: DateTimeFilter
  id: String
  pole: PoleRelationFilter
  poleId: IntFilter
}

type PoleMaxAggregate {
  cm: Int
  cost: Decimal
  dop: DateTime
  flex: Decimal
  id: Int
  length: String
  nfc: String
  note: String
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String
  weight: Int
}

input PoleMaxOrderByAggregateInput {
  cm: SortOrder
  cost: SortOrder
  dop: SortOrder
  flex: SortOrder
  id: SortOrder
  length: SortOrder
  nfc: SortOrder
  note: SortOrder
  revenue: SortOrder
  serialNumber: SortOrder
  soldAt: SortOrder
  status: SortOrder
  weight: SortOrder
}

type PoleMinAggregate {
  cm: Int
  cost: Decimal
  dop: DateTime
  flex: Decimal
  id: Int
  length: String
  nfc: String
  note: String
  revenue: Decimal
  serialNumber: String
  soldAt: Decimal
  status: String
  weight: Int
}

input PoleMinOrderByAggregateInput {
  cm: SortOrder
  cost: SortOrder
  dop: SortOrder
  flex: SortOrder
  id: SortOrder
  length: SortOrder
  nfc: SortOrder
  note: SortOrder
  revenue: SortOrder
  serialNumber: SortOrder
  soldAt: SortOrder
  status: SortOrder
  weight: SortOrder
}

input PoleOrderByWithAggregationInput {
  _avg: PoleAvgOrderByAggregateInput
  _count: PoleCountOrderByAggregateInput
  _max: PoleMaxOrderByAggregateInput
  _min: PoleMinOrderByAggregateInput
  _sum: PoleSumOrderByAggregateInput
  cm: SortOrder
  cost: SortOrder
  dop: SortOrder
  flex: SortOrder
  id: SortOrder
  length: SortOrder
  nfc: SortOrderInput
  note: SortOrderInput
  revenue: SortOrderInput
  serialNumber: SortOrderInput
  soldAt: SortOrderInput
  status: SortOrder
  weight: SortOrder
}

input PoleOrderByWithRelationInput {
  cm: SortOrder
  cost: SortOrder
  dop: SortOrder
  flex: SortOrder
  history: PoleHistoryOrderByRelationAggregateInput
  id: SortOrder
  length: SortOrder
  nfc: SortOrderInput
  note: SortOrderInput
  orderItem: OrderItemOrderByRelationAggregateInput
  revenue: SortOrderInput
  serialNumber: SortOrderInput
  soldAt: SortOrderInput
  status: SortOrder
  weight: SortOrder
}

type PoleRate {
  clubNewRate: Decimal
  clubUsedRate: Decimal
  id: String!
  length: String!
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

type PoleRateAvgAggregate {
  clubNewRate: Decimal
  clubUsedRate: Decimal
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

input PoleRateAvgOrderByAggregateInput {
  clubNewRate: SortOrder
  clubUsedRate: SortOrder
  newRate: SortOrder
  rentMeet: SortOrder
  rentMonth: SortOrder
  rentSeason: SortOrder
  usedRate: SortOrder
}

type PoleRateCountAggregate {
  _all: Int!
  clubNewRate: Int!
  clubUsedRate: Int!
  id: Int!
  length: Int!
  newRate: Int!
  rentMeet: Int!
  rentMonth: Int!
  rentSeason: Int!
  usedRate: Int!
}

input PoleRateCountOrderByAggregateInput {
  clubNewRate: SortOrder
  clubUsedRate: SortOrder
  id: SortOrder
  length: SortOrder
  newRate: SortOrder
  rentMeet: SortOrder
  rentMonth: SortOrder
  rentSeason: SortOrder
  usedRate: SortOrder
}

input PoleRateCreateInput {
  clubNewRate: Decimal
  clubUsedRate: Decimal
  id: String
  length: String!
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

type PoleRateGroupBy {
  _avg: PoleRateAvgAggregate
  _count: PoleRateCountAggregate
  _max: PoleRateMaxAggregate
  _min: PoleRateMinAggregate
  _sum: PoleRateSumAggregate
  clubNewRate: Decimal
  clubUsedRate: Decimal
  id: String!
  length: String!
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

type PoleRateMaxAggregate {
  clubNewRate: Decimal
  clubUsedRate: Decimal
  id: String
  length: String
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

input PoleRateMaxOrderByAggregateInput {
  clubNewRate: SortOrder
  clubUsedRate: SortOrder
  id: SortOrder
  length: SortOrder
  newRate: SortOrder
  rentMeet: SortOrder
  rentMonth: SortOrder
  rentSeason: SortOrder
  usedRate: SortOrder
}

type PoleRateMinAggregate {
  clubNewRate: Decimal
  clubUsedRate: Decimal
  id: String
  length: String
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

input PoleRateMinOrderByAggregateInput {
  clubNewRate: SortOrder
  clubUsedRate: SortOrder
  id: SortOrder
  length: SortOrder
  newRate: SortOrder
  rentMeet: SortOrder
  rentMonth: SortOrder
  rentSeason: SortOrder
  usedRate: SortOrder
}

input PoleRateOrderByWithAggregationInput {
  _avg: PoleRateAvgOrderByAggregateInput
  _count: PoleRateCountOrderByAggregateInput
  _max: PoleRateMaxOrderByAggregateInput
  _min: PoleRateMinOrderByAggregateInput
  _sum: PoleRateSumOrderByAggregateInput
  clubNewRate: SortOrderInput
  clubUsedRate: SortOrderInput
  id: SortOrder
  length: SortOrder
  newRate: SortOrderInput
  rentMeet: SortOrderInput
  rentMonth: SortOrderInput
  rentSeason: SortOrderInput
  usedRate: SortOrderInput
}

input PoleRateOrderByWithRelationInput {
  clubNewRate: SortOrderInput
  clubUsedRate: SortOrderInput
  id: SortOrder
  length: SortOrder
  newRate: SortOrderInput
  rentMeet: SortOrderInput
  rentMonth: SortOrderInput
  rentSeason: SortOrderInput
  usedRate: SortOrderInput
}

enum PoleRateScalarFieldEnum {
  clubNewRate
  clubUsedRate
  id
  length
  newRate
  rentMeet
  rentMonth
  rentSeason
  usedRate
}

input PoleRateScalarWhereWithAggregatesInput {
  AND: [PoleRateScalarWhereWithAggregatesInput!]
  NOT: [PoleRateScalarWhereWithAggregatesInput!]
  OR: [PoleRateScalarWhereWithAggregatesInput!]
  clubNewRate: DecimalNullableWithAggregatesFilter
  clubUsedRate: DecimalNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  length: StringWithAggregatesFilter
  newRate: DecimalNullableWithAggregatesFilter
  rentMeet: DecimalNullableWithAggregatesFilter
  rentMonth: DecimalNullableWithAggregatesFilter
  rentSeason: DecimalNullableWithAggregatesFilter
  usedRate: DecimalNullableWithAggregatesFilter
}

type PoleRateSumAggregate {
  clubNewRate: Decimal
  clubUsedRate: Decimal
  newRate: Decimal
  rentMeet: Decimal
  rentMonth: Decimal
  rentSeason: Decimal
  usedRate: Decimal
}

input PoleRateSumOrderByAggregateInput {
  clubNewRate: SortOrder
  clubUsedRate: SortOrder
  newRate: SortOrder
  rentMeet: SortOrder
  rentMonth: SortOrder
  rentSeason: SortOrder
  usedRate: SortOrder
}

input PoleRateUpdateInput {
  clubNewRate: NullableDecimalFieldUpdateOperationsInput
  clubUsedRate: NullableDecimalFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: StringFieldUpdateOperationsInput
  newRate: NullableDecimalFieldUpdateOperationsInput
  rentMeet: NullableDecimalFieldUpdateOperationsInput
  rentMonth: NullableDecimalFieldUpdateOperationsInput
  rentSeason: NullableDecimalFieldUpdateOperationsInput
  usedRate: NullableDecimalFieldUpdateOperationsInput
}

input PoleRateUpdateManyMutationInput {
  clubNewRate: NullableDecimalFieldUpdateOperationsInput
  clubUsedRate: NullableDecimalFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: StringFieldUpdateOperationsInput
  newRate: NullableDecimalFieldUpdateOperationsInput
  rentMeet: NullableDecimalFieldUpdateOperationsInput
  rentMonth: NullableDecimalFieldUpdateOperationsInput
  rentSeason: NullableDecimalFieldUpdateOperationsInput
  usedRate: NullableDecimalFieldUpdateOperationsInput
}

input PoleRateWhereInput {
  AND: [PoleRateWhereInput!]
  NOT: [PoleRateWhereInput!]
  OR: [PoleRateWhereInput!]
  clubNewRate: DecimalNullableFilter
  clubUsedRate: DecimalNullableFilter
  id: StringFilter
  length: StringFilter
  newRate: DecimalNullableFilter
  rentMeet: DecimalNullableFilter
  rentMonth: DecimalNullableFilter
  rentSeason: DecimalNullableFilter
  usedRate: DecimalNullableFilter
}

input PoleRateWhereUniqueInput {
  AND: [PoleRateWhereInput!]
  NOT: [PoleRateWhereInput!]
  OR: [PoleRateWhereInput!]
  clubNewRate: DecimalNullableFilter
  clubUsedRate: DecimalNullableFilter
  id: String
  length: String
  newRate: DecimalNullableFilter
  rentMeet: DecimalNullableFilter
  rentMonth: DecimalNullableFilter
  rentSeason: DecimalNullableFilter
  usedRate: DecimalNullableFilter
}

input PoleRelationFilter {
  is: PoleWhereInput
  isNot: PoleWhereInput
}

enum PoleScalarFieldEnum {
  cm
  cost
  dop
  flex
  id
  length
  nfc
  note
  revenue
  serialNumber
  soldAt
  status
  weight
}

input PoleScalarWhereWithAggregatesInput {
  AND: [PoleScalarWhereWithAggregatesInput!]
  NOT: [PoleScalarWhereWithAggregatesInput!]
  OR: [PoleScalarWhereWithAggregatesInput!]
  cm: IntWithAggregatesFilter
  cost: DecimalWithAggregatesFilter
  dop: DateTimeWithAggregatesFilter
  flex: DecimalWithAggregatesFilter
  id: IntWithAggregatesFilter
  length: StringWithAggregatesFilter
  nfc: StringNullableWithAggregatesFilter
  note: StringNullableWithAggregatesFilter
  revenue: DecimalNullableWithAggregatesFilter
  serialNumber: StringNullableWithAggregatesFilter
  soldAt: DecimalNullableWithAggregatesFilter
  status: StringWithAggregatesFilter
  weight: IntWithAggregatesFilter
}

type PoleSumAggregate {
  cm: Int
  cost: Decimal
  flex: Decimal
  id: Int
  revenue: Decimal
  soldAt: Decimal
  weight: Int
}

input PoleSumOrderByAggregateInput {
  cm: SortOrder
  cost: SortOrder
  flex: SortOrder
  id: SortOrder
  revenue: SortOrder
  soldAt: SortOrder
  weight: SortOrder
}

input PoleUpdateInput {
  cm: IntFieldUpdateOperationsInput
  cost: DecimalFieldUpdateOperationsInput
  dop: DateTimeFieldUpdateOperationsInput
  flex: DecimalFieldUpdateOperationsInput
  history: PoleHistoryUpdateManyWithoutPoleNestedInput
  length: StringFieldUpdateOperationsInput
  nfc: NullableStringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  orderItem: OrderItemUpdateManyWithoutPoleNestedInput
  revenue: NullableDecimalFieldUpdateOperationsInput
  serialNumber: NullableStringFieldUpdateOperationsInput
  soldAt: NullableDecimalFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  weight: IntFieldUpdateOperationsInput
}

input PoleUpdateManyMutationInput {
  cm: IntFieldUpdateOperationsInput
  cost: DecimalFieldUpdateOperationsInput
  dop: DateTimeFieldUpdateOperationsInput
  flex: DecimalFieldUpdateOperationsInput
  length: StringFieldUpdateOperationsInput
  nfc: NullableStringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  revenue: NullableDecimalFieldUpdateOperationsInput
  serialNumber: NullableStringFieldUpdateOperationsInput
  soldAt: NullableDecimalFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  weight: IntFieldUpdateOperationsInput
}

input PoleUpdateOneRequiredWithoutHistoryNestedInput {
  connect: PoleWhereUniqueInput
  connectOrCreate: PoleCreateOrConnectWithoutHistoryInput
  create: PoleCreateWithoutHistoryInput
  update: PoleUpdateToOneWithWhereWithoutHistoryInput
  upsert: PoleUpsertWithoutHistoryInput
}

input PoleUpdateOneRequiredWithoutOrderItemNestedInput {
  connect: PoleWhereUniqueInput
  connectOrCreate: PoleCreateOrConnectWithoutOrderItemInput
  create: PoleCreateWithoutOrderItemInput
  update: PoleUpdateToOneWithWhereWithoutOrderItemInput
  upsert: PoleUpsertWithoutOrderItemInput
}

input PoleUpdateToOneWithWhereWithoutHistoryInput {
  data: PoleUpdateWithoutHistoryInput!
  where: PoleWhereInput
}

input PoleUpdateToOneWithWhereWithoutOrderItemInput {
  data: PoleUpdateWithoutOrderItemInput!
  where: PoleWhereInput
}

input PoleUpdateWithoutHistoryInput {
  cm: IntFieldUpdateOperationsInput
  cost: DecimalFieldUpdateOperationsInput
  dop: DateTimeFieldUpdateOperationsInput
  flex: DecimalFieldUpdateOperationsInput
  length: StringFieldUpdateOperationsInput
  nfc: NullableStringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  orderItem: OrderItemUpdateManyWithoutPoleNestedInput
  revenue: NullableDecimalFieldUpdateOperationsInput
  serialNumber: NullableStringFieldUpdateOperationsInput
  soldAt: NullableDecimalFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  weight: IntFieldUpdateOperationsInput
}

input PoleUpdateWithoutOrderItemInput {
  cm: IntFieldUpdateOperationsInput
  cost: DecimalFieldUpdateOperationsInput
  dop: DateTimeFieldUpdateOperationsInput
  flex: DecimalFieldUpdateOperationsInput
  history: PoleHistoryUpdateManyWithoutPoleNestedInput
  length: StringFieldUpdateOperationsInput
  nfc: NullableStringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  revenue: NullableDecimalFieldUpdateOperationsInput
  serialNumber: NullableStringFieldUpdateOperationsInput
  soldAt: NullableDecimalFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  weight: IntFieldUpdateOperationsInput
}

input PoleUpsertWithoutHistoryInput {
  create: PoleCreateWithoutHistoryInput!
  update: PoleUpdateWithoutHistoryInput!
  where: PoleWhereInput
}

input PoleUpsertWithoutOrderItemInput {
  create: PoleCreateWithoutOrderItemInput!
  update: PoleUpdateWithoutOrderItemInput!
  where: PoleWhereInput
}

input PoleWhereInput {
  AND: [PoleWhereInput!]
  NOT: [PoleWhereInput!]
  OR: [PoleWhereInput!]
  cm: IntFilter
  cost: DecimalFilter
  dop: DateTimeFilter
  flex: DecimalFilter
  history: PoleHistoryListRelationFilter
  id: IntFilter
  length: StringFilter
  nfc: StringNullableFilter
  note: StringNullableFilter
  orderItem: OrderItemListRelationFilter
  revenue: DecimalNullableFilter
  serialNumber: StringNullableFilter
  soldAt: DecimalNullableFilter
  status: StringFilter
  weight: IntFilter
}

input PoleWhereUniqueInput {
  AND: [PoleWhereInput!]
  NOT: [PoleWhereInput!]
  OR: [PoleWhereInput!]
  cm: IntFilter
  cost: DecimalFilter
  dop: DateTimeFilter
  flex: DecimalFilter
  history: PoleHistoryListRelationFilter
  id: Int
  length: StringFilter
  nfc: String
  note: StringNullableFilter
  orderItem: OrderItemListRelationFilter
  revenue: DecimalNullableFilter
  serialNumber: StringNullableFilter
  soldAt: DecimalNullableFilter
  status: StringFilter
  weight: IntFilter
}

type Query {
  aggregateCustomer(cursor: CustomerWhereUniqueInput, orderBy: [CustomerOrderByWithRelationInput!], skip: Int, take: Int, where: CustomerWhereInput): AggregateCustomer!
  aggregateOrder(cursor: OrderWhereUniqueInput, orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): AggregateOrder!
  aggregateOrderItem(cursor: OrderItemWhereUniqueInput, orderBy: [OrderItemOrderByWithRelationInput!], skip: Int, take: Int, where: OrderItemWhereInput): AggregateOrderItem!
  aggregatePole(cursor: PoleWhereUniqueInput, orderBy: [PoleOrderByWithRelationInput!], skip: Int, take: Int, where: PoleWhereInput): AggregatePole!
  aggregatePoleHistory(cursor: PoleHistoryWhereUniqueInput, orderBy: [PoleHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: PoleHistoryWhereInput): AggregatePoleHistory!
  aggregatePoleRate(cursor: PoleRateWhereUniqueInput, orderBy: [PoleRateOrderByWithRelationInput!], skip: Int, take: Int, where: PoleRateWhereInput): AggregatePoleRate!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(cursor: CustomerWhereUniqueInput, distinct: [CustomerScalarFieldEnum!], orderBy: [CustomerOrderByWithRelationInput!], skip: Int, take: Int, where: CustomerWhereInput): [Customer!]!
  findFirstCustomer(cursor: CustomerWhereUniqueInput, distinct: [CustomerScalarFieldEnum!], orderBy: [CustomerOrderByWithRelationInput!], skip: Int, take: Int, where: CustomerWhereInput): Customer
  findFirstCustomerOrThrow(cursor: CustomerWhereUniqueInput, distinct: [CustomerScalarFieldEnum!], orderBy: [CustomerOrderByWithRelationInput!], skip: Int, take: Int, where: CustomerWhereInput): Customer
  findFirstOrder(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): Order
  findFirstOrderItem(cursor: OrderItemWhereUniqueInput, distinct: [OrderItemScalarFieldEnum!], orderBy: [OrderItemOrderByWithRelationInput!], skip: Int, take: Int, where: OrderItemWhereInput): OrderItem
  findFirstOrderItemOrThrow(cursor: OrderItemWhereUniqueInput, distinct: [OrderItemScalarFieldEnum!], orderBy: [OrderItemOrderByWithRelationInput!], skip: Int, take: Int, where: OrderItemWhereInput): OrderItem
  findFirstOrderOrThrow(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): Order
  findFirstPole(cursor: PoleWhereUniqueInput, distinct: [PoleScalarFieldEnum!], orderBy: [PoleOrderByWithRelationInput!], skip: Int, take: Int, where: PoleWhereInput): Pole
  findFirstPoleHistory(cursor: PoleHistoryWhereUniqueInput, distinct: [PoleHistoryScalarFieldEnum!], orderBy: [PoleHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: PoleHistoryWhereInput): PoleHistory
  findFirstPoleHistoryOrThrow(cursor: PoleHistoryWhereUniqueInput, distinct: [PoleHistoryScalarFieldEnum!], orderBy: [PoleHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: PoleHistoryWhereInput): PoleHistory
  findFirstPoleOrThrow(cursor: PoleWhereUniqueInput, distinct: [PoleScalarFieldEnum!], orderBy: [PoleOrderByWithRelationInput!], skip: Int, take: Int, where: PoleWhereInput): Pole
  findFirstPoleRate(cursor: PoleRateWhereUniqueInput, distinct: [PoleRateScalarFieldEnum!], orderBy: [PoleRateOrderByWithRelationInput!], skip: Int, take: Int, where: PoleRateWhereInput): PoleRate
  findFirstPoleRateOrThrow(cursor: PoleRateWhereUniqueInput, distinct: [PoleRateScalarFieldEnum!], orderBy: [PoleRateOrderByWithRelationInput!], skip: Int, take: Int, where: PoleRateWhereInput): PoleRate
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getCustomer(where: CustomerWhereUniqueInput!): Customer
  getOrder(where: OrderWhereUniqueInput!): Order
  getOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  getPole(where: PoleWhereUniqueInput!): Pole
  getPoleHistory(where: PoleHistoryWhereUniqueInput!): PoleHistory
  getPoleRate(where: PoleRateWhereUniqueInput!): PoleRate
  getUser(where: UserWhereUniqueInput!): User
  groupByCustomer(by: [CustomerScalarFieldEnum!]!, having: CustomerScalarWhereWithAggregatesInput, orderBy: [CustomerOrderByWithAggregationInput!], skip: Int, take: Int, where: CustomerWhereInput): [CustomerGroupBy!]!
  groupByOrder(by: [OrderScalarFieldEnum!]!, having: OrderScalarWhereWithAggregatesInput, orderBy: [OrderOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderWhereInput): [OrderGroupBy!]!
  groupByOrderItem(by: [OrderItemScalarFieldEnum!]!, having: OrderItemScalarWhereWithAggregatesInput, orderBy: [OrderItemOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderItemWhereInput): [OrderItemGroupBy!]!
  groupByPole(by: [PoleScalarFieldEnum!]!, having: PoleScalarWhereWithAggregatesInput, orderBy: [PoleOrderByWithAggregationInput!], skip: Int, take: Int, where: PoleWhereInput): [PoleGroupBy!]!
  groupByPoleHistory(by: [PoleHistoryScalarFieldEnum!]!, having: PoleHistoryScalarWhereWithAggregatesInput, orderBy: [PoleHistoryOrderByWithAggregationInput!], skip: Int, take: Int, where: PoleHistoryWhereInput): [PoleHistoryGroupBy!]!
  groupByPoleRate(by: [PoleRateScalarFieldEnum!]!, having: PoleRateScalarWhereWithAggregatesInput, orderBy: [PoleRateOrderByWithAggregationInput!], skip: Int, take: Int, where: PoleRateWhereInput): [PoleRateGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(cursor: OrderItemWhereUniqueInput, distinct: [OrderItemScalarFieldEnum!], orderBy: [OrderItemOrderByWithRelationInput!], skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]!
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  pole(where: PoleWhereUniqueInput!): Pole
  poleHistories(cursor: PoleHistoryWhereUniqueInput, distinct: [PoleHistoryScalarFieldEnum!], orderBy: [PoleHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: PoleHistoryWhereInput): [PoleHistory!]!
  poleHistory(where: PoleHistoryWhereUniqueInput!): PoleHistory
  poleRate(where: PoleRateWhereUniqueInput!): PoleRate
  poleRates(cursor: PoleRateWhereUniqueInput, distinct: [PoleRateScalarFieldEnum!], orderBy: [PoleRateOrderByWithRelationInput!], skip: Int, take: Int, where: PoleRateWhereInput): [PoleRate!]!
  poles(cursor: PoleWhereUniqueInput, distinct: [PoleScalarFieldEnum!], orderBy: [PoleOrderByWithRelationInput!], skip: Int, take: Int, where: PoleWhereInput): [Pole!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  age: Int
  email: String!
  id: String!
}

type UserAvgAggregate {
  age: Float
}

input UserAvgOrderByAggregateInput {
  age: SortOrder
}

type UserCountAggregate {
  _all: Int!
  age: Int!
  email: Int!
  id: Int!
}

input UserCountOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

input UserCreateInput {
  age: Int
  email: String!
  id: String
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  age: Int
  email: String!
  id: String!
}

type UserMaxAggregate {
  age: Int
  email: String
  id: String
}

input UserMaxOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

type UserMinAggregate {
  age: Int
  email: String
  id: String
}

input UserMinOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  age: SortOrderInput
  email: SortOrder
  id: SortOrder
}

input UserOrderByWithRelationInput {
  age: SortOrderInput
  email: SortOrder
  id: SortOrder
}

enum UserScalarFieldEnum {
  age
  email
  id
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
}

type UserSumAggregate {
  age: Int
}

input UserSumOrderByAggregateInput {
  age: SortOrder
}

input UserUpdateInput {
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  age: IntNullableFilter
  email: StringFilter
  id: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  age: IntNullableFilter
  email: String
  id: String
}